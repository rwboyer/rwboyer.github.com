<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>RB Design</title>
 <link href="http://ruby.rwboyer.com/atom.xml" rel="self"/>
 <link href="http://ruby.rwboyer.com/"/>
 <updated>2012-01-05T22:19:26-05:00</updated>
 <id>http://ruby.rwboyer.com/</id>
 <author>
   <name>RW Boyer</name>
   <email>rwboyer@mac.com</email>
 </author>

 
 <entry>
   <title>Another Year</title>
   <link href="http://tom.preston-werner.com/2012/01/Another-Year.html"/>
   <updated>2012-01-05T00:00:00-05:00</updated>
   <id>http://ruby.rwboyer.com/2012/01/Another-Year</id>
   <content type="html">&lt;h1&gt;Another Year of WTF&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;5 Jan 2012 - Another Year Of Technology Disappointment&lt;/p&gt;


&lt;p&gt;Another year stuck with Liquid, me I rather use ruby but the pain of maintaining and merging branches of Jekyll into my hacked up code base that uses Haml and Ruby directly with all the wonderfull ruby constructs and varialbles available in layouts and pages. It's just too painful. So moving on to &lt;em&gt;Octopress&lt;/em&gt;. We'll see how that goes.&lt;/p&gt;

&lt;p&gt;Disks vs. circles? Why am I getting disks on one server and circles as bullets with the exact same CSS?
* CSS is the same
* Code is the same
* Develop inspector shows the same inheritance.
* WTF&lt;/p&gt;

&lt;p&gt;Node.js, what a crock. The inmates are running the assylum. This is what happens when you spend way too much time jacking around with manipulating browser internals. Some how you manage to actually convince yourself that this is fun and good. Then you go completely around the bend and start trying to convince &lt;em&gt;everyone&lt;/em&gt; it's fun and good. Hence we have node.js.&lt;/p&gt;

&lt;p&gt;I love cell phones. Now you can be twiddled with constantly by everyone but that's not why I love them. I love them becuase slowly human beings have become accustomed to really bad phone service, audio quality, and having to repeat themselves a million times. This has prepared us for VOIP. Yea.&lt;/p&gt;

&lt;p&gt;RB
:wq&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>NGINX and Unicorn</title>
   <link href="http://tom.preston-werner.com/2011/01/nginx.html"/>
   <updated>2011-01-19T00:00:00-05:00</updated>
   <id>http://ruby.rwboyer.com/2011/01/nginx</id>
   <content type="html">&lt;h1&gt;&lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; and Unicorn&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;19 Jan 2011 &amp;#8211; What&amp;#8217;s all the hub-bub bub?&lt;/p&gt;
&lt;p&gt;So, we have all been reading about the wonders of new stuff to replace our old stuff. Well at least we have if we follow what is going on in the Ruby world even a little bit. Specifically there has been &lt;em&gt;a lot&lt;/em&gt; of hub-bub and controversy about &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; over Apache and Unicorn over Mongrel with increasing frequency in the past year or a little longer.&lt;/p&gt;
&lt;p&gt;At first the news was pretty lopsided. &lt;span class=&quot;caps&quot;&gt;NGINIX&lt;/span&gt; is &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;WAY&lt;/span&gt;&lt;/strong&gt; faster than Apache and Unicorn is &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;WAY&lt;/span&gt;&lt;/strong&gt; better than Mongrel. Lately there has been a lot of blowback along the lines of &lt;em&gt;Hmmmm, not really&lt;/em&gt; Apache/Passenger is fine and works great and has a &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;BETTER&lt;/span&gt;&lt;/strong&gt; scaling model. Granted a lot of that blowback has been generated by Passenger developers along with vague references to the &lt;em&gt;next version&lt;/em&gt; but still&amp;#8230; It was time to find out for myself. Up goes a bunch of test instances on both EC2 and Rackspace for some playing.&lt;/p&gt;
&lt;h2&gt;Bottom Line and Disclaimers&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;I am not running either &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; or Unicorn in production&lt;/li&gt;
	&lt;li&gt;All of my upfront conclusions are based on really small server instnaces&lt;/li&gt;
	&lt;li&gt;What I am looking at and care about may be &lt;strong&gt;way&lt;/strong&gt; different than you care about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, with that out of the way I can say that &lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt; processing in &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; is way more better (read efficient) than it is on Apache. I cannot see how this could be a whole lot different for anybody unless they are doing somthing &lt;em&gt;special&lt;/em&gt; with Apache and &lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt; termination, in which case you could do the same thing with &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt;. For me, I always terminate &lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt; in the webserver. Historically this has been far easier and less costly to scale than more specialized solutions that get very old very quick.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; seems to use a lot less memory than Apache for the same connection load when nnly proxying and serving static content. Of course this could be way different if Apache or &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; are doing way different jobs for you than the simple job I tested and normally use. This includes &lt;em&gt;any&lt;/em&gt; heavy module use of any kind. Look before you leap. An example could be as simple as Apache having a way better rewrite module than &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; &amp;#8211; I have no idea&amp;#8230; yet.&lt;/p&gt;
&lt;p&gt;Bottom line. On a really small server instance I can proxy to almost as many app servers as I can imagine &amp;#8211; amazing.&lt;/p&gt;
&lt;p&gt;On to Unicorn. Unicorn is going to make my life a lot easier or at the very least, my servers a lot less complicated. With most of my experience over doing it with the queing / buffering at too many layers is a recipie for problems. Especially where there is no need for it. Of course you want to do it if whatever is on the other front-end is somehow the constraint and cannot stand to be held up for even a moment but if that thing (like a multi-threaded, multi-process, multi-connection webserver) is already doing that job quing requests is useless. It doesn&amp;#8217;t make stuff go faster, or increase capacity. In every app I have ever seen, no matter what the underlying tech, doing this just exacerbates the &lt;strong&gt;pain&lt;/strong&gt; when you run out of juice at the end of the line or obfuscates intermittent issues.&lt;/p&gt;
&lt;p&gt;Having said that I am all for Unicorn&amp;#8217;s request distribution mechanism. Screw the aledged &lt;em&gt;thundering herd&lt;/em&gt; issue. You have to be an idiot if you have to scale that &lt;strong&gt;big&lt;/strong&gt; and can&amp;#8217;t avoid that with like &lt;em&gt;more than one Unicorn, on maybe more than one socket&lt;/em&gt;. At the end of the day I can get rid of some of the sanity checking and automated bullshit clearing stuff that is running on my servers. Unicorn has a lot of features built in that make deployment/managemet pretty simple without a bunch of dispariate tools wired together at home. I&amp;#8217;ll take that anyday. If I need some monitoring and control on top of that I will probably add BluePill but I am definitely rethinking my current overly complicated mess when I deploy Unicorn in production.&lt;/p&gt;
&lt;p&gt;Oh you want some numbers? Okay but that will have to wait a tiny bit. I plan on doing some more formal analysis on both Rackspace and EC2 this week and over the weekend.&lt;/p&gt;
&lt;p&gt;RB&lt;br /&gt;
:wq&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Full Circle</title>
   <link href="http://tom.preston-werner.com/2011/01/circle.html"/>
   <updated>2011-01-19T00:00:00-05:00</updated>
   <id>http://ruby.rwboyer.com/2011/01/circle</id>
   <content type="html">&lt;h1&gt;Full Circle&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;19 Jan 2011 &amp;#8211; If you sit back and watch, sometimes you cannot help but be amazed?&lt;/p&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;What prompted this series of random thoughts was partly a rash of &lt;em&gt;switching from Textmate to VI&lt;/em&gt; posts of late and &lt;a href=&quot;http://groups.google.com/group/haml/browse_thread/thread/f52b6750507b478&quot;&gt;the funniest thing I have ever read&lt;/a&gt; . That rant has nothing to do with Textmate to Vi but the context sort of brought the whole thing to a strange focus for me.&lt;/p&gt;
&lt;p&gt;In the beginning most of these young innovative web dudes and dude-ettes came up mostly from the M$ Windoze world because that is what they had at home.Upon doing stuff that actually had to work they kinda figured out that Linux/Unix was &amp;#8220;good on the server&amp;#8221;. Then came like this Ruby stuff, really really cool. Now we all know how painful Ruby is on a Windoze box (&lt;em&gt;actually everything is painful on Windoze but you don&amp;#8217;t really know that until you see something like Ruby that doesn&amp;#8217;t have a next, next, next, next, next &amp;#8220;wizard&amp;#8221;&lt;/em&gt;). So next comes the move to OS X for these guys/gals. Wow, this works great (shortly there is a realization that this is actually Unix with a way better couple of subsystems al la Apple) and there is this cool thingamagig that you &lt;strong&gt;must&lt;/strong&gt; have called Textmate.&lt;/p&gt;
&lt;p&gt;So the word gets around that if you want to do Ruby you gotta have Textmate and that only works on OS X and a Mac. Somewhere the whole Ruby on Unix thing sorta gets subsumed in the Textmate thing.&lt;/p&gt;
&lt;p&gt;Fastforward a little bit. Git. Holy crap, this git thing is friggin great. Like Really great. Now you do some cool stuff with Ruby and git hooks and you get github. Wow now we are cookin&amp;#8217;. And&amp;#8230; hey this git thing is actually better on the command line and come to think of it so is a lot of stuff.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s try this Vi thing (or sometimes this &lt;span class=&quot;caps&quot;&gt;EMACS&lt;/span&gt; thing &amp;#8211; but I am of the Vi church. What do you expect. I have been a &lt;span class=&quot;caps&quot;&gt;BSD&lt;/span&gt; guy since the 80&amp;#8217;s).&lt;br /&gt;
Man once you get used to it this Vi thing is quite amazing. I was learning all the shortcuts in Textmate anyway but this, this is really living.&lt;/p&gt;
&lt;p&gt;2011 &amp;#8211; now we have all the Textmate&amp;#8217;rs writing about how to make the transition to Vi. I happen to agree that there is a lot to be said for the Mac and Vi, and, and&amp;#8230; as &lt;em&gt;the&lt;/em&gt; development environment of choice for just about anything but .Not, I mean .Net, or is that dot-net, I don&amp;#8217;t know. I just got there from another place. Here I was thinking that I was stuck on Vi because I am an old fuddy-duddy that can&amp;#8217;t seem to retrain some 20+ year old muscle memories. I guess everything that is old is new again. Or&amp;#8230; Maybe it&amp;#8217;s just that some really great ideas are timeless.&lt;/p&gt;
&lt;p&gt;RB&lt;br /&gt;
:wq&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Old Business Models Die Hard</title>
   <link href="http://tom.preston-werner.com/2010/11/Mumps.html"/>
   <updated>2010-11-20T00:00:00-05:00</updated>
   <id>http://ruby.rwboyer.com/2010/11/Mumps</id>
   <content type="html">&lt;h1&gt;Old Business Models Die Hard&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;20 Nov 2010 &amp;#8211; A Flash Back To The 80&amp;#8217;s &amp;#8211; Like A Bad &lt;span class=&quot;caps&quot;&gt;LSD&lt;/span&gt; Trip&lt;/p&gt;
&lt;p&gt;Some technology markets astound me. Let&amp;#8217;s take the healthcare market. I am in the process of assisting a medical practice implement a new medical records system. To tell you the truth, this particular system is quite innovative. It&amp;#8217;s built the way I would build it, using technology I would choose today. It&amp;#8217;s delivered as in an &lt;span class=&quot;caps&quot;&gt;ASP&lt;/span&gt; model and the client is specificly targed to run on the iPad. Very cool, easy to use, It talks &amp;#8220;doctor&amp;#8221; and knows all of the industry &lt;em&gt;diagnostic codes&lt;/em&gt; so that the process of translating the work done to the insurance carrier is &lt;em&gt;automagic&lt;/em&gt;. It&amp;#8217;s actually the first system I have seen from a practice automation standpoint that I can really say I could jump on board with no caveats. As in &amp;#8220;it looks okay for something in the medical industry&amp;#8221;. The secret is the people that are behind the company don&amp;#8217;t come from the &lt;em&gt;healtcare technology industry&lt;/em&gt;. They come from the world the rest of us live in, you know the 21st century world.&lt;/p&gt;
&lt;p&gt;Enough with the preamble. So, this new system has to hook to the old system &amp;#8211; a &lt;em&gt;state of the art&lt;/em&gt; practice management system to retrieve all the patient info that has already been keyed. No big deal right? Wrong! &lt;strong&gt;Three thousand bucks&lt;/strong&gt;. I know what you&amp;#8217;re thinking. You&amp;#8217;re thinking &amp;#8220;that&amp;#8217;s no so bad for coding a bridge to the old data&amp;#8221;. Well you&amp;#8217;re right, it&amp;#8217;s not but that is not what we&amp;#8217;re talking about here. That &lt;em&gt;coding&lt;/em&gt; from the new company is &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;FREE&lt;/span&gt;&lt;/strong&gt;. Actually there is no real coding, they have a pretty innovative bridge to a bunch of popular systems already done. They also have a bunch of hook-ups to automate ordering reports, diagnostics, etc. The $3000 bucks is to the &lt;strong&gt;old&lt;/strong&gt; software company.&lt;/p&gt;
&lt;p&gt;If you aren&amp;#8217;t as tenatious (read pain in the ass) as me, you may not even be curious as to what that $3000 gets you. Well after pulling some threads here is what it gets you. Get ready, hold onto your hats, strap in for this:&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;THREE&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;THOUSAND&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;DOLLARS&lt;/span&gt;&lt;/strong&gt; buys you the old company installing an &lt;span class=&quot;caps&quot;&gt;ODBC&lt;/span&gt; driver on a client machine that already exists and already has access to the old software &lt;strong&gt;and&lt;/strong&gt; the old company types in the presumably hardcoded password to the &lt;span class=&quot;caps&quot;&gt;ODBC&lt;/span&gt; driver so that &lt;em&gt;you can access data that you own on a database that you own on software that you own on hardware that you own&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Really &amp;#8211; no shit. I can&amp;#8217;t make this stuff up. Great forking business model. Rape your existing customers for delivering no extra value on software that hasen&amp;#8217;t seen a new feature set in a decade. Brilliant stuff. These yo-yo&amp;#8217;s deserve to go out of business.&lt;/p&gt;
&lt;p&gt;RB&lt;br /&gt;
:wq&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Brand New MacBook Air</title>
   <link href="http://tom.preston-werner.com/2010/11/MacBook-Air.html"/>
   <updated>2010-11-18T00:00:00-05:00</updated>
   <id>http://ruby.rwboyer.com/2010/11/MacBook-Air</id>
   <content type="html">&lt;h1&gt;Brand New MacBook Air&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;18 Nov 2010 &amp;#8211; My Rationale For A Really Expensive 11.6&amp;quot; Air&lt;/p&gt;
&lt;p&gt;Normal people try to get the best quatifiable bang for their buck. Normal people that are willing to slam down $1400 in hard earned cash for a new MacBook Air no doubt end up getting the 13&amp;quot;. I mean who the crap would spend that much on the 11.6 inch model? You would have to be out of your mind. Wouldn&amp;#8217;t you?&lt;/p&gt;
&lt;p&gt;Come on, the 13 has a better, bigger screen. It has a faster processor no matter how you slice it. It has a better, longer lasting battery. It has the same 4Gig of memory for the same dinero. Let&amp;#8217;s see &amp;#8211; better &amp;#8211; better &amp;#8211; better. I&amp;#8217;ll take the less better one please. Yep, I maxed out everything on the 11.6 incher and it priced out pretty much the same as a better spec&amp;#8217;d 13.3.&lt;/p&gt;
&lt;p&gt;You might say &lt;span class=&quot;caps&quot;&gt;WTF&lt;/span&gt; &amp;#8211; right. Maybe you are facing the same set of decisions and your highly trained auto reaction is to hit the buy button on the one that is &amp;quot;better. Here is some food for thought for you:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Both 11.6 and 13.3 are too too small to do &amp;#8220;big screen&amp;#8221; kind of work on where you need a ton of info blasted at you at the same time. This is the realm of 15&amp;quot;HD minium (if you like to squint to see the tiny stuff). I got that in my top of the line 15&amp;quot; &lt;span class=&quot;caps&quot;&gt;MBP&lt;/span&gt;. Okay so you don&amp;#8217;t have one of those like me. And you also don&amp;#8217;t have a MacPro w/ 2&amp;#215;27&amp;#8243; Cinemas like me. Great &amp;#8211; get a 27&amp;quot; with a wireless keyboard and mouse for &amp;#8220;big&amp;#8221; work. Both of the MBA&amp;#8217;s will drive it fine.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;Back on point &amp;#8211; I am going to write and code on this thing while I am actually portable. I mean really portable. Make mine the small. When I write and/or code, activities that suck down a lot of my time, I &lt;em&gt;live&lt;/em&gt; in Terminal.app or full screen wordprocessor of the day (Pages, WriteRoom, Scrivener, etc.) These apps look great fullscreen on either MacBook Air. The look stupid in fullscreen HD+. Well at least they look stupid when you are in type the text mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;For my real work pattern of work &amp;#8211; close lid &amp;#8211; think &amp;#8211; open &amp;#8211; type &amp;#8211; close lid. The 11.6 batter will go all day. That&amp;#8217;s good enough for me.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;1.6Ghz C2D vs 1.83Ghz &amp;#8211; for writing/codeing heck even compiling &amp;#8211; as we all know unless you are rebuilding all of &lt;span class=&quot;caps&quot;&gt;GNU&lt;/span&gt; over and over &amp;#8211; anything you can buy (except and Atom) is too too fast to even catch a smoke and think before the build is done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My MacBook Air intent is small and focused. I want the smallest and mosted focused device. So why did I max it out. Ummmm now that I think about it, maybe I shouldn&amp;#8217;t have. Ahh what the heck &amp;#8211; 128G is not that much storage &amp;#8211; I do like my HD. And you just gotta have 4G so you can fire up a couple of server images using Vagrant to test on, etc. Oh and I gotta run Aperture in a pinch without out growing old.&lt;/p&gt;
&lt;p&gt;Good luck with your decisions &amp;#8211; I waffled on this since the annoucement and finally did the deed today.&lt;/p&gt;
&lt;p&gt;RB&lt;br /&gt;
:wq&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How to set up new DASD (disk) for use with VM/370 under hercules</title>
   <link href="http://tom.preston-werner.com/2010/11/VM370-new-disk.html"/>
   <updated>2010-11-16T00:00:00-05:00</updated>
   <id>http://ruby.rwboyer.com/2010/11/VM370-new-disk</id>
   <content type="html">&lt;h1&gt;How to set up new &lt;span class=&quot;caps&quot;&gt;DASD&lt;/span&gt; (disk) for use with VM/370 under hercules&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;16 Nov 2010 &amp;#8211; Just incase you want to know&lt;/p&gt;
&lt;p&gt;I am a bit rusty on my CP/&lt;span class=&quot;caps&quot;&gt;CMS&lt;/span&gt; commands so I tried googling the syntax of something regarding &lt;span class=&quot;caps&quot;&gt;DASD&lt;/span&gt;. What I found were about 300 endless threads about setting up new &lt;span class=&quot;caps&quot;&gt;DASD&lt;/span&gt; for use as Mini Disks for &lt;span class=&quot;caps&quot;&gt;CMS&lt;/span&gt; users. Most of the discussion was off on wild tangents and never really answered the newbie that asked the questions. Here is the long and short of it assuming you have the ever popular starter VM/370 system up and running in hercules.&lt;/p&gt;
&lt;p&gt;You will have to know a tiny bit of &lt;span class=&quot;caps&quot;&gt;CMS&lt;/span&gt; like how to copy files and use the editor but not a whole lot of other things. This is sort of a place holder in case I have to refer some other people to it.&lt;/p&gt;
&lt;script src='http://pastie.org/1303542.js'&gt;&lt;/script&gt;&lt;p&gt;I am assuming you are logged on as &lt;span class=&quot;caps&quot;&gt;MAINT&lt;/span&gt; and that you have made a copy of the default directory (I believe it is called &amp;#8220;RELEASE6 &lt;span class=&quot;caps&quot;&gt;DIRECT&lt;/span&gt;&amp;#8221; on MAINT&amp;#8217;s 194 device) to &lt;span class=&quot;caps&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;DIRECT&lt;/span&gt; on your A minidisk all you need to do now is run &lt;span class=&quot;caps&quot;&gt;DIRECT&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;DIRECT&lt;/span&gt; and you should be golden. There is no reason to run &lt;span class=&quot;caps&quot;&gt;DMKFMT&lt;/span&gt; card deck unless you are generating a new VM and want to setup a new directory, spool, etc. When you log in to your new user you do need to use the &lt;span class=&quot;caps&quot;&gt;CMS&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;FORMAT&lt;/span&gt; 191 A command.&lt;/p&gt;
&lt;p&gt;RB&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Playing With Technology</title>
   <link href="http://tom.preston-werner.com/2010/11/playing.html"/>
   <updated>2010-11-15T00:00:00-05:00</updated>
   <id>http://ruby.rwboyer.com/2010/11/playing</id>
   <content type="html">&lt;h1&gt;Playing With Technology&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;15 Nov 2010 &amp;#8211; VM/370, MySQL Cluster, Vagrant, VBox, Rails3, &lt;span class=&quot;caps&quot;&gt;RVM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Been playing around a lot with tech lately. Somehow I re-embroiled myself in implementing some solutions for a couple of small businesses over the last couple years. I guess it started with a friend that needed to recover an ancient intel/unix system from a crashed drive&amp;#8230; So guess who was the only person in a large radius that had a clue?&lt;/p&gt;
&lt;p&gt;Moving on&amp;#8230; the great thing about open source is not that not much of it isreally &amp;#8220;new&amp;#8221;, heck I was doing half this stuff (conceptually) in the late 80&amp;#8217;s on big iron. The more things change the more they are the same. The great thing is how cheap &amp;#8220;big business solutions&amp;#8221; are for small business. That and some of the tools are pretty amazing in terms of convenience. Vagrant/Chef has to be the best thing since sliced bread.&lt;/p&gt;
&lt;p&gt;All of this playing around got me thinking. Why is it that some platforms/languages/tools generate so much devotion and some don&amp;#8217;t. Don&amp;#8217;t get me wrong, I don&amp;#8217;t mean popularity or market penetration, I mean that almost all the users of of &lt;em&gt;some&lt;/em&gt; platforms/languages/tools are extreme Zelots vs. mere fans or users.&lt;/p&gt;
&lt;p&gt;Multics, VM/&lt;span class=&quot;caps&quot;&gt;CMS&lt;/span&gt;, Unix, C, emacs, and a few others seem to stick out as the former. I predict that ruby may become one of those few that have a Zelot like following even after it&amp;#8217;s time has passed and it&amp;#8217;s not &amp;#8220;new&amp;#8221; anymore. Who knows but I have the same feeling about it as I did for some of my other fond tech memories. We&amp;#8217;ll see. Thinkng about some of the good ones got me so teary eyed that I fired up VM/370 over the weekend on &lt;a href=&quot;http://www.hercules-390.org/&quot;&gt;hercules&lt;/a&gt; regen&amp;#8217;d it and then got &lt;span class=&quot;caps&quot;&gt;MVS&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;TSO&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;MVT&lt;/span&gt;, and a new gen of VM all running under it as virtual machines. Amazing. I even remember alot of 370 assembler. My Core i5 Macbook Pro sure blows the ol&amp;#8217; 3083 into the weeds. It is amazing how efficient the big iron code is even in an emulator. I think the &lt;a href=&quot;http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP3083.html&quot;&gt;3083&lt;/a&gt; is the first machine I worked on &amp;#8211; that and a &lt;a href=&quot;http://jack.hoaroots.org/b5900.htm&quot;&gt;Burroughs B6900&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More later.&lt;/p&gt;
&lt;p&gt;RB&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Fotki Amongst Others</title>
   <link href="http://tom.preston-werner.com/2010/04/fotki.html"/>
   <updated>2010-04-18T00:00:00-04:00</updated>
   <id>http://ruby.rwboyer.com/2010/04/fotki</id>
   <content type="html">&lt;h1&gt;Fotki Amongst Others&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;18 Apr 2010 &amp;#8211; If You Are Sick Of &lt;span class=&quot;caps&quot;&gt;FLICKR&lt;/span&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;I am not a big fan of &lt;span class=&quot;caps&quot;&gt;FLICKR&lt;/span&gt; &amp;#8211; ever since they cancelled my paid account about a month into it and get this&amp;#8230; I never ever even received an email about why. This made me so angry that I tried for 3 months to contact anyone at Flickr and Yahoo to no avail. I sent emails, I tried every single means in every single channel after digging and digging &amp;#8211; Nada, nothing. Not a peep as to why. No response.&lt;/p&gt;
&lt;p&gt;So I guess I will try this&amp;#8230; Pretty neat for free.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://hotimg23.fotki.com/a/38_102/24_215/2000-034-15.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;RB&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>For The Love Of Ruby</title>
   <link href="http://tom.preston-werner.com/2010/04/for-the-love-of-ruby.html"/>
   <updated>2010-04-17T00:00:00-04:00</updated>
   <id>http://ruby.rwboyer.com/2010/04/for-the-love-of-ruby</id>
   <content type="html">&lt;h1&gt;For The Love Of Ruby&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;17 Apr 2010 &amp;#8211; Along Way From Home&lt;/p&gt;
&lt;p&gt;Well, I am sick and tired of WordPress. Really I am sick of the whole mess that is &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; land. A long long time ago in a galaxy far far away, I was a software developer for about 18 years &amp;#8211; accidently. You see I went to school for Physics and Math and chucked in a CompSci major for the fun of it then accidently spent 18 years screwing around with computer crap. Then I sort of semi-retired and did the commercial photography thing &amp;#8211; then I got sick of it when it felt just like.&lt;/p&gt;
&lt;p&gt;Anyway here we are. Every time I mess around with my site I have to fix somebody&amp;#8217;s crappy &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; code. The issue is some of the stuff I want to get done with it leaves me&amp;#8230; dreading looking at the mess of fork-lift reuse and horrendously bad crap that is WordPress plug-in&amp;#8217;s, themes, etc, etc. I really wouldn&amp;#8217;t mind if it was even remotely elegant, clever, cool&amp;#8230; pretty but it is not. When I came across this stuff in my professional life I &amp;#8220;refactored&amp;#8221; it &amp;#8211; a nice way of saying ditch it and start over. The problem is that I really do not want to write software any more &amp;#8211; if I did I would. The pay is fantastic. Now I enjoy fooling around with a few things here and there for pure recreation. When doing that I will only use the tools I actually love to use. I can write C in my sleep and as long as any code that touches mine is fantastically good I don&amp;#8217;t mind that. Forget C++, not because it is bad &amp;#8211; it is just the majority of the frameworks blow and again it is a hopeless mess done mostly by people that have not a clue. Cutting to the chase the two things I am willing to mess with at this point are Obj-C (just for the cool Cocoa frameworks so I can mess with new Apple stuff and my real love &amp;#8211; Ruby.&lt;/p&gt;
&lt;p&gt;Not that Ruby is a holy grail or anything &amp;#8211; it is just the community is sooooo.. much different. It seems that language, and all of the frameworks, and conventions, and tools were brought into existence by software developers &amp;#8211; real ones. Where &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; and the world around it seems to be the creation of VB knuckle heads and a few McDonalds fry cooks that hacked around in a Wordpress theme for a couple of weeks to get it to work. So&amp;#8230; I think I might abandon Wordpress, the entire reason I use it is that I didn&amp;#8217;t want any &amp;#8220;computer work&amp;#8221; while publishing my little blog. Trying to navigate that WordPress plug-in mess to find things that actually work and work the way I want them to is a nightmare. If I am going to have to screw with this stuff for more than 10 minutes then I may as well just do it myself &amp;#8211; or at least the parts that I want to.&lt;/p&gt;
&lt;p&gt;Here is my rediculously quick and dirty &amp;#8220;conversion&amp;#8221; of the old site with virtually no work. Behind the scenes there is a lot going on here, I just didn&amp;#8217;t feel like dealling with the &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; for the other stuff yet. The really cool part is I actually wrote a custom WordPress converter in &lt;span class=&quot;caps&quot;&gt;IRB&lt;/span&gt; that took 5 minutes with DataMapper and then grabbed a copy of the source of &lt;a href=&quot;http://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; and coverted it to use &lt;span class=&quot;caps&quot;&gt;HAML&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;SASS&lt;/span&gt; so I wouldn&amp;#8217;t have to blow my brains out closing &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; tags. Heck I use &lt;span class=&quot;caps&quot;&gt;HAML&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;SASS&lt;/span&gt; to create any &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; or &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; that I have to do vs getting some sort of repetitive motion injuries from all the &amp;lt;/screw you&amp;gt; nonsence.&lt;/p&gt;
&lt;p&gt;The other really nice thing is that I can either host it statcally as I am doing over on &lt;a href=&quot;http://rwboyer.github.com/&quot;&gt;GitHub&lt;/a&gt; or I can do it dynamically. The best part is for all the parts that need to be dynamic &amp;#8211; as in server side code &amp;#8211; I can just write them as lightweight web services with &lt;span class=&quot;caps&quot;&gt;RACK&lt;/span&gt;/Sinatra. &lt;br /&gt;
Yes I think I am done with the whole &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt;/Wordpress shitty ass mess.&lt;/p&gt;
&lt;p&gt;RB&lt;/p&gt;</content>
 </entry>
 
 
</feed>
